#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "host_device_common.h"
#include "ray_common.glsl"

layout (location = 0) rayPayloadInEXT RayPayload rayPayload;
hitAttributeEXT vec3 hitUV;

layout(buffer_reference, scalar) buffer Vertices
{
	Vertex VERTICES[];
};
layout(buffer_reference, scalar) buffer Indices
{
	uvec3 INDICES[];
};

layout (set = eObjectData, binding = 0, scalar) readonly buffer ObjectBuffer
{
	ObjectData objects[];
} objectBuffer;

layout (set = eDiffuseTex, binding = 0) uniform sampler2D diffuseTex[];

void main()
{
	ObjectData currentObject = objectBuffer.objects[gl_InstanceCustomIndexEXT];
	Indices curIndices = Indices(currentObject.indexBufferAddress);
	Vertices curVertices = Vertices(currentObject.vertexBufferAddress);

	int matID = currentObject.matIndex;

	uvec3 triangleInd = curIndices.INDICES[gl_PrimitiveID];

	Vertex v0 = curVertices.VERTICES[triangleInd.x];
	Vertex v1 = curVertices.VERTICES[triangleInd.y];
	Vertex v2 = curVertices.VERTICES[triangleInd.z];

	const vec3 barycentrics = vec3(1.0 - hitUV.x - hitUV.y, hitUV.x, hitUV.y);

	// compute hit point coordinates
	const vec2 texCoord = v0.uv * barycentrics.x + v1.uv * barycentrics.y + v2.uv * barycentrics.z;

	vec4 albedo = texture(diffuseTex[matID], texCoord);

	if (albedo.a < 0.2)
	{
		ignoreIntersectionEXT;
	}
}
