#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_ARB_shader_clock : enable

#include "host_device_common.h"

layout (set = eGeneralRTX, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (set = eOutImage, binding = 0, rgba32f) uniform image2D outImage;
layout (set = eGlobal, binding = 0) uniform CameraBuffer
{
	CameraData camData;
} camSceneData;

layout (push_constant) uniform constants
{
	RayPushConstants rayConstants;
};

#include "ray_common.glsl"
#include "sampling.glsl"

layout (location = 0) rayPayloadEXT hitPayload prd;

void main()
{
	uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, uint(clockARB()));

	float r1 = rng(seed);
	float r2 = rng(seed);

	vec2 subpixelJitter = (rayConstants.frame == 0) ? vec2(0.5) : vec2(r1, r2);

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixelJitter;
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = camSceneData.camData.invView[3];
	vec4 target = inverse(camSceneData.camData.proj) * vec4(d.x, d.y, 1, 1);
	vec4 direction = camSceneData.camData.invView * vec4(normalize(target.xyz), 0);

	uint rayFlags = gl_RayFlagsNoneEXT;
	float tMin = 0.001;
	float tMax = 10000.0;

	prd.hitValue = vec3(0.0);
	prd.seed = seed;
	prd.depth = 0;
	prd.rayOrigin = origin.xyz;
	prd.rayDirection = direction.xyz;
	prd.weight = vec3(0.0);

	vec3 curWeight = vec3(1.0);
	vec3 hitValue = vec3(0.0);

	for (; prd.depth < 10; ++prd.depth)
	{
		traceRayEXT(topLevelAS,	   // TLAS
				rayFlags,		   // flags
				0xFF,			   // cull mask
				0,				   // SBT record offset
				0,				   // SBT record stride
				0,				   // miss shader index
				prd.rayOrigin,	   // ray origin
				tMin,			   // ray min range
				prd.rayDirection,  // ray direction
				tMax,			   // ray max range
				0				   // ray payload location
		);

		hitValue += prd.hitValue * curWeight;
		curWeight *= prd.weight;

		// Russian roulette path termination
		if (prd.depth > 3)
		{
			const float q = max(0.05f, 1.f - max(prd.weight.r, max(prd.weight.g, prd.weight.b)));
			if (rng(seed) < q)
			{
				break;
			}
			curWeight /= (1.0 - q);
		}
	}

	if (rayConstants.frame > 0)
	{
		float a = 1.0 / float(rayConstants.frame + 1);
		vec3 oldColor = imageLoad(outImage, ivec2(gl_LaunchIDEXT.xy)).xyz;
		imageStore(outImage, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, hitValue, a), 1.0));
	}
	else
	{
		imageStore(outImage, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0));
	}
}